import {Inject, Injectable, PLATFORM_ID} from '@angular/core';
import {LocalStorageService} from './local-storage.service';
import {isPlatformBrowser} from '@angular/common';

@Injectable({
  providedIn: 'root'
})
export class TourService {
  static nextButton = {
    classes: 'shepherd-button shepherd-button-primary',
    text: 'Next',
    type: 'next'
  };
  static cancelButton = {
    classes: 'shepherd-button shepherd-button-secondary',
    text: 'Exit',
    type: 'cancel'
  };
  static backButton = {
    classes: 'shepherd-button shepherd-button-primary',
    text: 'Back',
    type: 'back'
  };
  static completeButton = {
    classes: 'shepherd-button shepherd-button-primary',
    text: 'Complete',
    type: 'next'
  };
  firstButtons = [TourService.cancelButton, TourService.nextButton];
  lastButtons = [TourService.backButton, TourService.completeButton];
  standardButtons = [TourService.cancelButton, TourService.backButton, TourService.nextButton];
  defaultStepOptions = {
    classes: '',
    cancelIcon: {
      enabled: true
    },
    scrollTo: true,
    highlightClass: 'highlight',
  };
  shepherdService: any;
  loadPromise: any;

  constructor(
    private localStorageService: LocalStorageService,
    @Inject(PLATFORM_ID) private platformID: any) {
    if (isPlatformBrowser(this.platformID)) {
      this.loadPromise = import('angular-shepherd').then((shepherdLib: any) => {
        this.shepherdService = new shepherdLib.ShepherdService();
      });
    }
  }


  getAvailableTours(): TourDefinition[] {
    return [
      {title: 'Download Data from List Pages', definition: 'Download data in CSV format for analysis offline.'},
      {title: 'Download Data from Details Pages', definition: 'Download data in CSV format for analysis offline.'},
      {
        title: 'IDG Generated Resources',
        definition: 'View the resources generated by IDG partners, including mouse lines, reagents, data resources, and more.'
      },
      {
        title: 'TIGA Data For Targets',
        definition: 'GWAS Phenotypes for targets are ranked and sorted according to the number and quality of confirming studies.'
      },
      {
        title: 'TIGA Data for Diseases',
        definition: 'Targets associated with a GWAS trait are ranked and sorted according to the number and quality of confirming studies.'
      }
    ];
  }


  tourScroller(element) {
    if (isPlatformBrowser(this.platformID)) {
      // @ts-ignore
      const id = this.section;
      const yOffset = -120;
      const element1 = document.getElementById(id);
      const y = element1.getBoundingClientRect().top + window.pageYOffset + yOffset;

      window.scrollTo({top: y, behavior: 'smooth'});
    }
  }

  structureSearchTour(manual: boolean) {
    if (!isPlatformBrowser(this.platformID)) {
      return;
    }
    if (!manual && !!this.localStorageService.store.getItem('structure-search-tour-complete')) {
      return;
    }
    this.loadPromise.then(() => {
      this.setupAndRunTour(manual);
    });
  }

  setupAndRunTour(manual: boolean) {
    const platformID = this.platformID;
    const title = 'Structure Search Tutorial';
    const defaultSteps = [
      {
        id: 'structure_search_begin',
        attachTo: {
          element: '#structure-search-container',
          on: 'top'
        },
        scrollToHandler: this.tourScroller.bind({section: 'structure-search-container', platformID: this.platformID}),
        buttons: this.firstButtons.slice(),
        title,
        text: ['Use the structure search tool to initiate a search based on a chemical structure.']
      },
      {
        id: 'enter_compound',
        attachTo: {
          element: '#load-card',
          on: 'top'
        },
        scrollToHandler: this.tourScroller.bind({section: 'load-card', platformID: this.platformID}),
        buttons: this.standardButtons.slice(),
        title,
        text: ['To begin, enter a compound name or ID to load a chemical structure.']
      },
      {
        id: 'structure_drawer',
        attachTo: {
          element: '#sketcher-row',
          on: 'top'
        },
        scrollToHandler: this.tourScroller.bind({section: 'sketcher-row', platformID: this.platformID}),
        buttons: this.standardButtons.slice(),
        title,
        text: ['Successfully resolved compounds can be edited in the MarvinJS Sketcher, or you can draw a structure from scratch.']
      },
      {
        id: 'smiles_editor',
        attachTo: {
          element: '#smiles-card',
          on: 'top'
        },
        scrollToHandler: this.tourScroller.bind({section: 'smiles-card', platformID: this.platformID}),
        buttons: this.standardButtons.slice(),
        title,
        text: ['The SMILES used for the query will appear here. This field can also be used for editing, ' +
        'or copy/pasting a SMILES directly.']
      },
      {
        id: 'similar-structure-search',
        attachTo: {
          element: '#similar-structure-search',
          on: 'top'
        },
        scrollToHandler: this.tourScroller.bind({section: 'similar-structure-search', platformID: this.platformID}),
        buttons: this.standardButtons.slice(),
        title,
        text: ['This tool will search for ligands in TCRD that have a similar structure to the query SMILES.']
      },
      {
        id: 'search-method',
        attachTo: {
          element: '#search-method',
          on: 'top'
        },
        scrollTo: false,
        buttons: this.standardButtons.slice(),
        title,
        text: ['Choose your search method, either by whole structure similarity, or substructure similarity. Results are ranked ' +
        'according to the Tanimoto Similarity, and can be filtered after the search is complete.']
      },
      {
        id: 'predicted-targets-search',
        attachTo: {
          element: '#predicted-targets-search',
          on: 'top'
        },
        scrollToHandler: this.tourScroller.bind({section: 'predicted-targets-search', platformID: this.platformID}),
        buttons: this.standardButtons.slice(),
        title,
        text: ['This tool will search for targets predicted to have activity against the query structure.']
      }
    ];
    this.shepherdService.defaultStepOptions = this.defaultStepOptions;
    this.shepherdService.modal = true;
    this.shepherdService.confirmCancel = false;
    this.shepherdService.addSteps(defaultSteps);
    ['cancel', 'complete'].forEach(event => {
        this.shepherdService.tourObject.on(event, () => {
          this.completeTour(manual, 'structure-search-tutorial', 'structure-search-tour-complete', title, event);
        });
    });
    this.shepherdService.start();
  }

  completeTour(manual: boolean, lightbulbID: string, localStorageKey: string, title: string, result: string) {
    const prevResult = this.localStorageService.store.getItem(localStorageKey);
    if (prevResult === 'complete' || (prevResult === 'cancel' && result === 'cancel')) {
      return;
    }
    this.localStorageService.store.setItem(localStorageKey, result);
    const defaultSteps = [
      {
        id: 'complete',
        attachTo: {
          element: '#' + lightbulbID,
          on: 'top'
        },
        scrollToHandler: this.tourScroller.bind({section: lightbulbID, platformID: this.platformID}),
        buttons: [TourService.completeButton],
        title,
        text: ['Revisit the tutorial at any time by clicking the lightbulb icon.']
      }
    ];
    this.shepherdService.defaultStepOptions = this.defaultStepOptions;
    this.shepherdService.modal = true;
    this.shepherdService.confirmCancel = false;
    this.shepherdService.addSteps(defaultSteps);
    this.shepherdService.start();
  }
}

export class TourDefinition {
  title: string;
  definition: string;
}
